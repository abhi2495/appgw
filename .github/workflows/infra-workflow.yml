name: "Create required infrastructure in given Azure Environment"

on:
  workflow_dispatch:
    inputs:
      env:
        type: environment
        description: "Name of the environment in which infrastructure needs to be setup"
        required: true

jobs:
  create-azure-resources:
    runs-on: ubuntu-latest
    environment:
      name: "${{ github.event.inputs.env }}"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Storing Azure Credentials as Env variables
        run: |
          echo "ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')" >> $GITHUB_ENV

          echo "TF_VAR_AZ_SPN_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')" >> $GITHUB_ENV
          echo "TF_VAR_AZ_SPN_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')" >> $GITHUB_ENV

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Load environment variables
        uses: dcarbone/yaml-to-env-action@v1.0.0
        with:
          debug: "${{ inputs.debug }}"
          yaml-file: "./config/${{ github.event.inputs.env }}.yml"
          yq-version: "4.27.5"

      - name: Install Terraform
        uses: autero1/action-terraform@v1.1.1
        with:
          terraform_version: 1.2.8

      - name: Create Resource Group if not exist
        run: |
          chmod +x ./scripts/create-rg-if-not-exists.sh
          ./scripts/create-rg-if-not-exists.sh --resource-group ${{ env.TF_VAR_RESOURCE_GROUP_NAME }} --location ${{ env.TF_VAR_AZ_REGION }} --cost-center-id ${{ env.COST_CENTER_ID_TAG }} --customer ${{ env.CUSTOMER_TAG }} --environment-type ${{ env.ENVIRONMENT_TYPE_TAG }} --product-group "${{ env.PRODUCT_GROUP_TAG }}"

      - name: Create Storage Account For Terraform Backend(if not exists)
        run: |
          chmod +x ./scripts/create-tf-backend-if-not-exists.sh
          ./scripts/create-tf-backend-if-not-exists.sh --resource-group ${{ env.TF_VAR_RESOURCE_GROUP_NAME }} --location ${{ env.TF_VAR_AZ_REGION }} \
                         --storage-account-name ${{ env.TERRAFORM_BACKEND_STORAGE_ACCOUNT_NAME }} --container-name ${{ env.TERRAFORM_BACKEND_CONTAINER_NAME }}

      - name: Initialize Terraform
        run: terraform init -input=false -backend-config="resource_group_name=${{ env.TF_VAR_RESOURCE_GROUP_NAME }}" -backend-config="storage_account_name=${{ env.TERRAFORM_BACKEND_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.TERRAFORM_BACKEND_CONTAINER_NAME }}"
        working-directory: scripts/${{ github.event.inputs.env }}

      # - name: Destroy Terraform plan
      #   id: destroy
      #   run: terraform destroy -auto-approve
      #   working-directory: scripts/${{ github.event.inputs.env }}

      - name: Create Terraform plan
        id: plan
        run: terraform plan -input=false -no-color
        working-directory: scripts/${{ github.event.inputs.env }}

      - name: Apply Terraform plan
        run: terraform apply -auto-approve -input=false
        working-directory: scripts/${{ github.event.inputs.env }}

  install-jupyterhub:
    runs-on: ubuntu-latest
    needs: [create-azure-resources]
    environment:
      name: "${{ github.event.inputs.env }}"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install Dependencies
        run: |
          python3.8 -m pip install PyYAML

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Load environment variables
        uses: dcarbone/yaml-to-env-action@v1.0.0
        with:
          debug: "${{ inputs.debug }}"
          yaml-file: "./config/${{ github.event.inputs.env }}.yml"
          yq-version: "4.27.5"

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.TF_VAR_RESOURCE_GROUP_NAME }}
          cluster-name: ${{ env.TF_VAR_AKS_NAME }}

      - name: Add aks-preview extension
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az extension add --name aks-preview
          az extension update --name aks-preview
          az aks update --resource-group ${{ env.TF_VAR_RESOURCE_GROUP_NAME }} --name ${{ env.TF_VAR_AKS_NAME }} --enable-pod-identity --enable-pod-identity-with-kubenet
          az feature register --namespace "Microsoft.ContainerService" --name "EnablePodIdentityPreview"
          az provider register -n Microsoft.ContainerService

      - name: Create namespace and secrets
        run: |
          kubectl get namespace | grep -q "^${{ env.TF_VAR_AKS_NAMESPACE_NAME }}" || kubectl create namespace ${{ env.TF_VAR_AKS_NAMESPACE_NAME }}

          ACR_PASSWORD=$(az acr credential show --name ${{ env.TF_VAR_ACR_NAME }} --resource-group ${{ env.TF_VAR_RESOURCE_GROUP_NAME }} --query passwords[0].value -o tsv)
          kubectl create secret docker-registry regcred --namespace ${{ env.TF_VAR_AKS_NAMESPACE_NAME }} --docker-server="${{ env.TF_VAR_ACR_NAME }}.azurecr.io" --docker-username="${{ env.TF_VAR_ACR_NAME }}" --docker-password="$ACR_PASSWORD" --save-config --dry-run=client -o yaml | kubectl apply -f -

          STORAGE_ACC_KEY=$(az storage account keys list --account-name ${{ env.TF_VAR_STORAGE_ACCOUNT_NAME }} --resource-group ${{ env.TF_VAR_RESOURCE_GROUP_NAME }} --query [0].value -o tsv)
          kubectl create secret generic az-sa-secret --namespace ${{ env.TF_VAR_AKS_NAMESPACE_NAME }} --from-literal=azurestorageaccountname=${{ env.TF_VAR_STORAGE_ACCOUNT_NAME }} --from-literal=azurestorageaccountkey="$STORAGE_ACC_KEY" --save-config --dry-run=client -o yaml | kubectl apply -f -

      # The below step is run with a retry mechanism. Because while testing it has been noted that for the first time the "az aks pod-identity add" throws error saying "Cluster identity has no assignment permission over identity"
      - name: Create pod identity
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 2
          command: |
            IDENTITY_RESOURCE_ID=$(az identity show -g ${{ env.TF_VAR_RESOURCE_GROUP_NAME }} -n ${{ env.TF_VAR_MANAGED_IDENTITY_NAME }} --query id -o tsv)
            az aks pod-identity add --resource-group ${{ env.TF_VAR_RESOURCE_GROUP_NAME }} --cluster-name ${{ env.TF_VAR_AKS_NAME }} --namespace ${{ env.TF_VAR_AKS_NAMESPACE_NAME }} --name ${{ env.TF_VAR_AKS_POD_IDENTITY_NAME }} --identity-resource-id "$IDENTITY_RESOURCE_ID"

      - name: Get azure identity and binding
        run: |
          kubectl get azureidentity -n ${{ env.TF_VAR_AKS_NAMESPACE_NAME }}
          kubectl get azureidentitybinding -n ${{ env.TF_VAR_AKS_NAMESPACE_NAME }}

      - name: Adding permision to keyVault
        run: |
          IDENTITY_PRINCIPAL_ID=$(az identity show -g ${{ env.TF_VAR_RESOURCE_GROUP_NAME }} -n ${{ env.TF_VAR_MANAGED_IDENTITY_NAME }} --query principalId -o tsv)
          az keyvault set-policy --name ${{ env.TF_VAR_KEYVAULT_NAME }} --object-id "$IDENTITY_PRINCIPAL_ID" --secret-permissions get list

      - name: Create Secret Provider
        run: |
          KV_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')
          python3.8 scripts/compile-configs.py config/config-templates/secretproviderclass-hub.yml '{"key_vault_name": "${{ env.TF_VAR_KEYVAULT_NAME }}", "key_vault_tenant_id": "$KV_TENANT_ID" }' compiled-secretproviderclass-hub.yml
          cat compiled-secretproviderclass-hub.yml
          kubectl --namespace ${{ env.TF_VAR_AKS_NAMESPACE_NAME }} apply -f compiled-secretproviderclass-hub.yml

      # - name: Install jupyterhub helm chart
      #   run: |
      #     helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
      #     helm repo update
      #     helm upgrade \
      #       --cleanup-on-fail \
      #       --install ${{ env.HELM_CHART_NAME }} jupyterhub/jupyterhub \
      #       --namespace ${{ env.TF_VAR_AKS_NAMESPACE_NAME }} \
      #       --create-namespace \
      #       --version=2.0.0 \
      #       --values config/jupyterhub/jupyterhub-helm-config.yaml

      # - name: Create kubernetes ingress
      #   working-directory: ./config/jupyterhub
      #   run: |
      #     ipAddress=$(az network public-ip show -n ${{ env.TF_VAR_PUBLIC_IP_NAME }} -g ${{ env.TF_VAR_RESOURCE_GROUP_NAME }} --query ipAddress -o tsv)
      #     sed -i 's|${JUPYTERHUB_NAMESPACE}|${{ env.TF_VAR_AKS_NAMESPACE_NAME }}|'  jupyterhub-ingress-config.yaml
      #     sed -i 's|${APPGW_FRONTEND_IP}|'"$ipAddress"'|'  jupyterhub-ingress-config.yaml
      #     kubectl apply -f jupyterhub-ingress-config.yaml
