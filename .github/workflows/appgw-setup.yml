name: "Setup API Gateway"

on:
  workflow_dispatch:
    inputs:
      env:
        type: environment
        description: 'Name of the environment in which app gateway needs to be setup'
        required: true

jobs:
  create-app-gateway:
    runs-on: ubuntu-latest
    environment: 
      name: "${{ github.event.inputs.env }}"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Azure login
        uses: azure/actions/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Load environment variables
        uses: dcarbone/yaml-to-env-action@v1.0.0
        with:
          debug: '${{ inputs.debug }}'
          yaml-file: './config/${{ github.event.inputs.env }}.yml'
          yq-version: '4.27.5'

      - name: Install Terraform
        uses: autero1/action-terraform@v1.1.1
        with:
          terraform_version: 1.2.8

      - name: Create Storage Account For Terraform Backend(if not exists)
        run: |
          chmod +x ./scripts/create-tf-backend-if-not-exists.sh
          ./.github/create-tf-backend-if-not-exists.sh --resource-group ${{ env.RESOURCE_GROUP_NAME }} --location ${{ env.AZ_REGION }} \
                         --storage-account-name ${{ env.TERRAFORM_BACKEND_STORAGE_ACCOUNT_NAME }} --container-name ${{ env.TERRAFORM_BACKEND_CONTAINER_NAME }}

      - name: Initialize Terraform for Stratosphere
        run: terraform init -input=false -backend-config="resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" -backend-config="storage_account_name=${{ env.TERRAFORM_BACKEND_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.TERRAFORM_BACKEND_CONTAINER_NAME }}"
        working-directory: scripts/${{ github.event.inputs.env }}



      # - name: Run app gateway deployment bicep script
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: 2.30.0
      #     inlineScript: |
      #       az deployment group create --name="${{ env.DEPLOYMENT_NAME }}" \
      #         --resource-group "${{ env.RESOURCE_GROUP_NAME }}" \
      #         --template-file "./.github/scripts/appgw-deploy.bicep" \
      #         --parameters rgName="${{ env.RESOURCE_GROUP_NAME }}" \
      #                     instanceName="${{ inputs.environment }}" \
      #                     instanceId="${{ env.INSTANCE_ID }}" \
      #                     primaryLocation="${{ env.PRIMARY_REGION }}" \
      #                     primaryLocationShort="${{ env.PRIMARY_REGION_SHORT }}" \
      #                     tags="${{ env.TAGS }}" \
      #                     appObjectId="${{ env.APP_OBJECT_ID }}" \
      #                     primaryRegionVnet_rgName="${{ env.VNET_RESOURCE_GROUP_NAME }}" \
      #                     primaryRegionVnetName="${{ env.VNET_NAME }}" \
      #                     primaryRegionRouteTableName="${{ env.VNET_ROUTE_TABLE }}" \
      #                     primaryAPPGSubnetCIDR="${{ env.VNET_CIDR_APPGW }}" \
      #                     letsEncryptPublicCertificateName="${{ env.LETSENCRYPT_PUBLIC_CERTIFICATE_NAME }}" \
      #                     letsEncryptPrivateCertificateName="${{ env.LETSENCRYPT_PRIVATE_CERTIFICATE_NAME }}" \
      #                     oasContainerName="${{ env.OAS_CONTAINER_NAME }}" \
      #                     primaryAppGatewayPrivateIpAddress="${{ env.APP_GATEWAY_PRIVATE_IP_ADDRESS }}" \
      #                     primaryAPIMPrivateIpAddress="${{ env.APIM_PRIVATE_IP_ADDRESS }}" \
      #                     userObjectIdsForKVAccess="${{ env.USER_OBJECT_IDS_FOR_KV_ACCESS }}"

